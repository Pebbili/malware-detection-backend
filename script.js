require('dotenv').config() // Import and configure dotenv
const express = require('express')
const axios = require('axios')
const cors = require('cors')

const app = express()
app.use(express.json())
app.use(cors()) // Enable CORS for frontend communication

// Mock user database
const users = {
  testuser: 'password123', // Example credentials
  admin: 'admin123',
}

// VirusTotal API key (from environment variable)
const VIRUSTOTAL_API_KEY = process.env.VIRUSTOTAL_API_KEY

if (!VIRUSTOTAL_API_KEY) {
  throw new Error(
    'VirusTotal API key is missing. Please set it in the .env file.'
  )
}

// Function to detect malware
async function detectMalware(url) {
  console.log(url)

  // VirusTotal API endpoint for URL scanning
  const virustotalUrl = 'https://www.virustotal.com/vtapi/v2/url/report'

  // Parameters for the API request
  const params = {
    apikey: VIRUSTOTAL_API_KEY,
    resource: url,
  }

  try {
    // Send request to VirusTotal API
    const response = await axios.get(virustotalUrl, { params })

    if (response.status === 200) {
      const result = response.data

      // Interpret VirusTotal scan results
      if (result.response_code === 0) {
        // URL not found in VirusTotal database, submit for scanning
        const scanUrl = 'https://www.virustotal.com/vtapi/v2/url/scan'
        const scanParams = new URLSearchParams()
        scanParams.append('apikey', VIRUSTOTAL_API_KEY)
        scanParams.append('url', url)

        const scanResponse = await axios.post(scanUrl, scanParams)

        if (scanResponse.status === 200) {
          return {
            url: url,
            message: 'URL submitted for scanning. Please check again later.',
            scan_id: scanResponse.data.scan_id,
          }
        } else {
          return {
            url: url,
            message: 'Error submitting URL for scanning',
            status_code: scanResponse.status,
          }
        }
      }

      // Analyze scan results
      const positives = result.positives || 0
      const total = result.total || 0

      if (positives > 0) {
        return {
          url: url,
          message: `Malicious - ${positives}/${total} security vendors flagged this URL`,
          scan_details: `${positives} out of ${total} vendors detected threats`,
        }
      } else {
        return {
          url: url,
          message: 'Safe',
          scan_details: `0 out of ${total} vendors detected threats`,
        }
      }
    } else {
      // Handle API request error
      return {
        url: url,
        message: 'Error checking URL',
        status_code: response.status,
      }
    }
  } catch (error) {
    // Handle network or request errors
    console.error('Error contacting VirusTotal:', error.message)
    return {
      url: url,
      message: `Network error: ${error.message}`,
      error: true,
    }
  }
}

// Endpoint for user login
app.post('/login', (req, res) => {
  const { username, password } = req.body

  // Validate credentials
  if (users[username] && users[username] === password) {
    res.json({ status: 'success', message: 'Login successful' })
  } else {
    res
      .status(401)
      .json({ status: 'error', message: 'Invalid username or password' })
  }
})

// Endpoint for malware detection
app.post('/scan', async (req, res) => {
  const { url } = req.body

  if (!url) {
    return res.status(400).json({ error: 'URL is required' })
  }

  // Perform malware detection
  const result = await detectMalware(url)
  res.json(result)
})

// Start the server
const PORT = 3000
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`)
})
